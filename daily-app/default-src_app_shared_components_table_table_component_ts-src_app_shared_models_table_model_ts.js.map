{"version":3,"file":"default-src_app_shared_components_table_table_component_ts-src_app_shared_models_table_model_ts.js","mappings":"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","names":["AdjustmentService","constructor","http","getManualAdjustment","date","this","post","environment","Defines","updateManualAdjustment","list","aggregationList","i0","factory","ProfilesService","Subject","getProfilesList","manageProfile","profile","reqType","action","getProfileById","id","profileId","deleteProfile","getPrivilegesList","M","ctx_r13","ctx_r15","oxw","DialogComponent","profilesService","usersService","footprintService","Subscription","FormGroup","name","FormControl","Validators","username","ngOnInit","ngOnChanges","changes","open","openDialog","dialogConfig","profileListSubscriber","subscribe","resp","profileList","payload","profilesList","filter","item","isActive","console","log","userManagementSubscriber","getUser","user","objectIdentifier","handleOldValue","dialogForm","patchValue","view","disable","onSubmit","value","handleNewValue","updateUser","lockFlag","userId","addUser","reset","cancel","ngOnDestroy","unsubscribe","selectors","s","ctx_r17","ctx_r21","ctx_r42","ctx_r49","rowData_r23","ctx_r53","ctx_r62","ctx_r75","ctx_r82","TableComponent","primengConfig","router","confirmationService","headerService","validationService","manualAgjustService","transferAdjustService","footPrintService","exportExcelService","clipboardApi","ripple","viewMode","viewDetails","enableUpdate","openUserDialog","applyFilterGlobal","$event","stringVal","dt","filterGlobal","target","edit","table","showSubject","next","url","navigateByUrl","updateLockFlag","row","lck","profileSubscription","delete","event","confirm","message","icon","accept","deleteUser","data","reject","getFlag","flag","ChangeData","feild","type","rowIndex","epochDate","localStorage","getItem","trxInSubsValue","f","_a","trxOutSubsValue","v","_b","calculationValidations","ratePlanKey","trxInSubs","trxOutSubs","inSubs","outSubs","length","obj","find","dwhStatusKey","inAdjustFlag","inSubTransactionTypeKey","d","_c","trxTypeKey","outAdjustFlag","outSubTransactionTypeKey","P","_d","fillList","targetRow","max","numberOfSubs","manualAdjustList","undefined","trxValue","trxData","extracols","C","calculated","calculation","closing","originalData","variance","index","ratePlanObj","adjusts","adjustNotValid","rateplanNotValid","editableRowId","existing","transferAdjustList","map","i","ratePlanGroupKey","ratePlanType","splice","trxType","oldSubs","originalrow","Math","abs","opening","dataToCalculate","filtered","oldCalc","newCalc","calc","updateBalance","push","dateKey","dayDateKey","a","e","p","dataKey","pgGroupKey","update","submitData","refreshFlag","getvalidationList","JSON","parse","stringify","transferSubscription","updateTransferAdjustment","getTransferAdjustment","getTransferAdjustmentList","exportExcel","exportAsExcelFile","copyToClipboard","copiedData","selectedData","trxTypeName","subs","lines","join","copyFromContent","sortColumn","n","prevSortStatus","field","order","ctx","TransferAdjustmentService","addTransferAdjustmentRequests","UsersService","BehaviorSubject","usersList$","usersList","asObservable","header","inputs","label","element","fieldId","required","buttons","getUsersList","pathUrl","pipe","tap","O","users","profileName","profileModel","S","Object","ValidationService","retrieveBalance","aggregationLists","retrieveTransactionTypes","get","getMAxMinRatePlans"],"sourceRoot":"webpack:///","sources":["./src/app/manual-adjustment/services/adjustment.service.ts","./src/app/profiles/services/profiles.service.ts","./src/app/shared/components/dialog/dialog.component.html","./src/app/shared/components/dialog/dialog.component.ts","./src/app/shared/components/table/table.component.html","./src/app/shared/components/table/table.component.ts","./src/app/shared/models/table.model.ts","./src/app/transfer-adjustment/services/transfer-adjustment.service.ts","./src/app/users/services/users.service.ts","./src/app/validation/services/validation.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiResponse } from 'src/app/shared/statics/apiResponse';\r\nimport { Defines } from 'src/app/shared/statics/defines';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ManualAdjustment } from '../models/manual-adjustment.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdjustmentService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getManualAdjustment(date: number) {\r\n    let body = { date: date };\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.ADJUSTMENT_ENDPOINTS.REPORT_SERVICE +\r\n        Defines.ADJUSTMENT_ENDPOINTS.MANUAL_ADJUSTMENT +\r\n        Defines.CRUD.GET_ALL,\r\n      body\r\n    );\r\n  }\r\n\r\n  updateManualAdjustment(list: ManualAdjustment[]) {\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.ADJUSTMENT_ENDPOINTS.REPORT_SERVICE +\r\n        Defines.ADJUSTMENT_ENDPOINTS.MANUAL_ADJUSTMENT +\r\n        Defines.CRUD.UPDATE,\r\n      { aggregationList: list }\r\n    );\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { ApiResponse } from 'src/app/shared/statics/apiResponse';\r\nimport { Defines } from 'src/app/shared/statics/defines';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Profile } from '../models/profile.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProfilesService {\r\n  showSubject = new Subject<boolean>();\r\n  constructor(private http: HttpClient) {}\r\n  getProfilesList() {\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.USERS_ENDPOINTS.USERS_MANAGEMENT_PATH +\r\n        Defines.PROFILES_ENDPOINTS.GET_PROFILES_LIST,\r\n      {}\r\n    );\r\n  }\r\n\r\n  manageProfile(profile: Profile, reqType?: string) {\r\n    let action: string;\r\n    if (reqType === 'edit') {\r\n      action = Defines.PROFILES_ENDPOINTS.UPDATE_PROFILE;\r\n    } else {\r\n      action = Defines.PROFILES_ENDPOINTS.CREATE_PROFILE;\r\n    }\r\n    let body = { profile: profile };\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url + Defines.USERS_ENDPOINTS.USERS_MANAGEMENT_PATH + action,\r\n      body\r\n    );\r\n  }\r\n\r\n  getProfileById(id: number) {\r\n    let body = { profileId: id };\r\n    return this.http.post(\r\n      environment.url +\r\n        Defines.USERS_ENDPOINTS.USERS_MANAGEMENT_PATH +\r\n        Defines.PROFILES_ENDPOINTS.GET_PROFILE_BY_ID,\r\n      body\r\n    );\r\n  }\r\n\r\n  deleteProfile(id: number) {\r\n    return this.http\r\n      .post(\r\n        environment.url +\r\n          Defines.USERS_ENDPOINTS.USERS_MANAGEMENT_PATH +\r\n          Defines.PROFILES_ENDPOINTS.DELETE_PROFILE,\r\n        { profileId: id }\r\n      )\r\n  }\r\n  getPrivilegesList() {\r\n    let urlPath =\r\n      environment.url +\r\n      Defines.USERS_ENDPOINTS.USERS_MANAGEMENT_PATH +\r\n      Defines.PRIVILEGES_ENDPOINTS.PRIVILEGE +\r\n      Defines.CRUD.GET_ALL;\r\n    return this.http.post<ApiResponse<any>>(urlPath, {});\r\n  }\r\n}\r\n","<p-dialog\r\n  [(visible)]=\"open\"\r\n  [closable]=\"true\"\r\n  [modal]=\"true\"\r\n  class=\"shared-dialog\"\r\n>\r\n  <ng-template pTemplate=\"header\" class=\"flex justify-content-center\">\r\n    <div>\r\n      <i class=\"{{ dialogConfig.icon }} mr-2\"></i>\r\n      <span class=\"text\">{{ dialogConfig.header }}</span>\r\n    </div>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"content\">\r\n    <form\r\n    autocomplete=\"off\" \r\n      [formGroup]=\"dialogForm\"\r\n      (ngSubmit)=\"onSubmit()\"\r\n      class=\"row text dialog-enhance justify-content-center content-style\"\r\n    >\r\n      <hr />\r\n      <div class=\"row flex flex-wrap pt-2\">\r\n        <div *ngFor=\"let field of dialogConfig.inputs\" class=\"col-6 col-style\">\r\n          <br />\r\n\r\n          <span class=\"p-float-label\" *ngIf=\"field.element == 'input'\">\r\n            <input\r\n              id=\"float-input\"\r\n              style=\"width: 25vw\"\r\n              type=\"text\"\r\n              formControlName=\"{{ field.fieldId }}\"\r\n              pInputText\r\n              required=\"{{ field.required }}\"\r\n              maxlength=\"50\"\r\n            />\r\n            <label for=\"float-input\"\r\n              >{{ field.label }}\r\n              <span *ngIf=\"field.required\" class=\"required\">*</span></label\r\n            >\r\n          </span>\r\n          <span class=\"p-float-label modal\" *ngIf=\"field.element == 'dropdown'\">\r\n            <p-dropdown\r\n              [options]=\"\r\n                dialogConfig.name == 'user-management' ? profileList : []\r\n              \"\r\n              styleClass=\"tableDrop\"\r\n              id=\"float-dropdown\"\r\n              optionLabel=\"name\"\r\n              [required]=\"field.required\"\r\n              [optionValue]=\"dialogConfig.name == 'user-management' ? 'id' : ''\"\r\n              formControlName=\"{{ field.fieldId }}\"\r\n              appendTo=\"body\"\r\n              [autoDisplayFirst]=\"false\"\r\n            ></p-dropdown>\r\n            <label for=\"float-dropdown\"\r\n              >{{ field.label + \"  \"\r\n              }}<span *ngIf=\"field.required\" class=\"required\">*</span></label\r\n            >\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div\r\n        class=\"row flex justify-content-end text-center\"\r\n        *ngIf=\"!dialogConfig.view\"\r\n      >\r\n        <div class=\"flex text-center\">\r\n          <button\r\n            *ngFor=\"let button of dialogConfig.buttons\"\r\n            pButton\r\n            class=\"mb-2 mr-2 text-center\"\r\n            type=\"{{ button.type }}\"\r\n            label=\"{{ button.label }}\"\r\n            [ngClass]=\"\r\n              button.type == 'submit'\r\n                ? 'p-button-raised p-button-danger red-button'\r\n                : button.type == 'reset'\r\n                ? ' p-button-danger p-button-text white-button'\r\n                : ''\r\n            \"\r\n            (click)=\"button.type == 'reset' ? cancel() : ''\"\r\n            [disabled]=\"button.label == 'Create' && dialogForm.invalid\"\r\n          ></button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n</p-dialog>\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { Profile } from 'src/app/profiles/models/profile.model';\r\nimport { ProfilesService } from 'src/app/profiles/services/profiles.service';\r\nimport { ProfileModel } from 'src/app/users/models/profile.model';\r\nimport { User } from 'src/app/users/models/user';\r\nimport { UsersService } from 'src/app/users/services/users.service';\r\n// import { DynamicDialogConfig } from 'primeng/dynamicdialog';\r\nimport { DialogData } from '../../models/dialog.model';\r\nimport { FootprintService } from '../../services/footprint-service/footprint.service';\r\n\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss'],\r\n})\r\nexport class DialogComponent implements OnInit, OnChanges, OnDestroy {\r\n  @Input() dialogConfig!: DialogData;\r\n  @Input() openDialog!: boolean;\r\n  @Input() closeDialog!: boolean;\r\n  open!: boolean;\r\n  profileList!: ProfileModel[];\r\n  user!: User;\r\n  profileListSubscriber = new Subscription();\r\n  userManagementSubscriber = new Subscription();\r\n\r\n  dialogForm = new FormGroup({\r\n    name: new FormControl('', [Validators.required]),\r\n    username: new FormControl('', [Validators.required]),\r\n    profileId: new FormControl(),\r\n  });\r\n\r\n  constructor(\r\n    private profilesService: ProfilesService,\r\n    private usersService: UsersService,\r\n    private footprintService: FootprintService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.open = this.openDialog;\r\n    if (this.dialogConfig) {\r\n      if (this.dialogConfig.name == 'user-management') {\r\n        this.profileListSubscriber = this.profilesService\r\n          .getProfilesList()\r\n          .subscribe((resp) => {\r\n            this.profileList = resp.payload.profilesList.filter(\r\n              (item: Profile) => item.isActive == 1\r\n            );\r\n            console.log(this.profileList);\r\n          });\r\n      }\r\n      if (this.dialogConfig.name == 'user-management' && this.dialogConfig.id) {\r\n        console.log(this.dialogConfig.id);\r\n        this.userManagementSubscriber = this.usersService\r\n          .getUser(this.dialogConfig.id as number)\r\n          .subscribe((resp) => {\r\n            this.user = resp['payload'];\r\n            this.footprintService.objectIdentifier = this.dialogConfig.id;\r\n            let oldUser: User = {\r\n              name: this.user.name,\r\n              username: this.user.username,\r\n              profileId: this.user.profileId,\r\n            };\r\n            this.footprintService.handleOldValue(oldUser);\r\n            this.dialogForm.patchValue({\r\n              name: this.user.name,\r\n              username: this.user.username,\r\n              profileId: this.user.profileId,\r\n            });\r\n          });\r\n      }\r\n\r\n      if (this.dialogConfig.view) this.dialogForm.disable();\r\n    }\r\n  }\r\n  onSubmit() {\r\n    this.open = false;\r\n    console.log(this.dialogForm.value);\r\n    if (this.dialogConfig.name == 'user-management' && !this.dialogConfig.id) {\r\n      let user = this.dialogForm.value;\r\n      this.footprintService.handleNewValue(user);\r\n      this.usersService.addUser(user);\r\n    } else if (\r\n      this.dialogConfig.name == 'user-management' &&\r\n      this.dialogConfig.id\r\n    ) {\r\n      console.log(this.user);\r\n      let newUser: User = {\r\n        name: this.dialogForm.value.name,\r\n        username: this.dialogForm.value.username,\r\n        profileId: this.dialogForm.value.profileId,\r\n      };\r\n      this.footprintService.handleNewValue(newUser);\r\n      let user: User = {\r\n        name: this.dialogForm.value.name,\r\n        lockFlag: this.user.lockFlag,\r\n        username: this.dialogForm.value.username,\r\n        profileId: this.dialogForm.value.profileId,\r\n        userId: this.dialogConfig.id,\r\n      };\r\n      this.usersService.updateUser(user);\r\n    }\r\n    this.dialogForm.reset();\r\n  }\r\n  cancel() {\r\n    this.open = false;\r\n    this.dialogForm.reset();\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.profileListSubscriber.unsubscribe();\r\n    this.userManagementSubscriber.unsubscribe();\r\n  }\r\n}\r\n","<p-table\r\n  class=\"table\"\r\n  #dt\r\n  [value]=\"table.data\"\r\n  [paginator]=\"table.pagination && table.data && table.data.length > 0\"\r\n  [rows]=\"pageSize\"\r\n  [loading]=\"loading\"\r\n  styleClass=\"p-datatable-striped\"\r\n  [globalFilterFields]=\"table.globalFilterFields\"\r\n  [rowsPerPageOptions]=\"[5, 15, 25, 50]\"\r\n  [selectionMode]=\"table.name == 'transferAdjustment'?'multiple':''\"\r\n  [(selection)]=\"selectedData\"\r\n  (onSort)=\"sortColumn($event)\"\r\n  >\r\n  <ng-template pTemplate=\"header\">\r\n    <tr>\r\n      <th\r\n        *ngFor=\"let header of table.cols\"\r\n        pSortableColumn=\"{{ header.fieldId }}\"\r\n      >\r\n        <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n          {{ header.title }}\r\n          <p-columnFilter\r\n            class=\"col-filter\"\r\n            type=\"text\"\r\n            field=\"{{ header.fieldId }}\"\r\n            display=\"menu\"\r\n          ></p-columnFilter>\r\n          <p-sortIcon field=\"{{ header.fieldId }}\"></p-sortIcon>\r\n        </div>\r\n      </th>\r\n      <th>\r\n        <div class=\"mt-2\"><span class=\"break\">|</span></div>\r\n      </th>\r\n      <th *ngFor=\"let header of table.extracols\">\r\n        <div\r\n          *ngIf=\"header.title !== 'search' && header.show\"\r\n          class=\"p-d-flex p-jc-between p-ai-center\"\r\n        >\r\n          <span\r\n            (click)=\"header.title == 'Export as Excel' ? exportExcel() : ''\"\r\n            [ngClass]=\"header.title == 'Export as Excel' ? 'export' : ''\"\r\n          >\r\n            <i\r\n              *ngIf=\"header.title == 'Export as Excel'\"\r\n              class=\"pi pi-file-excel\"\r\n              (click)=\"exportExcel()\"\r\n            ></i>\r\n            {{ header.title }}\r\n          </span>\r\n          <span class=\"copy\" (click)=\"copyToClipboard()\" *ngIf=\"table.name == 'transferAdjustment'\">\r\n            <i class=\"pi pi-clone\"></i>\r\n            Copy\r\n          </span>\r\n        </div>\r\n        <div\r\n          *ngIf=\"header.title == 'search' && header.show\"\r\n          [ngClass]=\"table.name == 'transferAdjustment'?'align-end':''\">\r\n          <div class=\"p-d-flex p-jc-between p-ai-center search-style\">\r\n            <span class=\"p-input-icon-left p-ml-auto\">\r\n              <i class=\"pi pi-search pr-5\"></i>\r\n              <input\r\n                (input)=\"applyFilterGlobal($event, 'contains')\"\r\n                pInputText\r\n                class=\"search-input\"\r\n                type=\"text\"\r\n                placeholder=\"Search...\"\r\n                maxlength=\"50\"\r\n              />\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </th>\r\n    </tr>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"body\" let-rowData let-data let-rowIndex=\"rowIndex\">\r\n    <tr [pSelectableRow]=\"data\" [pSelectableRowIndex]=\"rowIndex\"\r\n    [ngClass]=\"table.name !== 'transferAdjustment'?'unselectable':''\">\r\n      <td\r\n        *ngFor=\"let col of table.cols\"\r\n        [ngClass]=\"{ 'locked-row': rowData?.lockFlag }\"\r\n      >\r\n        <div class=\"{{ col.classStyle }}\" [ngClass]=\"(table.name == 'validation' ||table.name == 'manualAdjustment') && rowData[col.fieldId] == 0 ? 'grayBG' : ''\">\r\n          <span>{{\r\n            rowData[col.fieldId]?.name\r\n              ? rowData[col.fieldId].name\r\n              : rowData[col.fieldId]\r\n          }}</span>\r\n        </div>\r\n      </td>\r\n      <div class=\"mt-3\"><span class=\"break pl-3\">|</span></div>\r\n      <td *ngFor=\"let col of table.extracols\" [ngClass]=\"table.name == 'manualAdjustment' || table.name == 'transferAdjustment'?'position':''\">\r\n        <div class=\"lockWidth flex\" *ngIf=\"col.fieldId == 'lockFlag'\">\r\n          <div class=\"flex lock-span\">\r\n            <i\r\n              class=\"pr-2\"\r\n              [ngClass]=\"{\r\n                'icon-unlock': !rowData.lockFlag,\r\n                'icon-lock-open': rowData.lockFlag\r\n              }\"\r\n            ></i\r\n            ><span class=\"pr-2\" *ngIf=\"table.name == 'users'\"\r\n              >{{ rowData.lockFlag ? unlockUser + \"User\" : lockUser + \"User\" }}\r\n            </span>\r\n            <span class=\"pr-2\" *ngIf=\"table.name == 'profiles'\"\r\n              >{{ rowData.isActive ? \"Active\" : \"Not active\" }}\r\n            </span>\r\n          </div>\r\n          {{\r\n            table.name == \"profiles\"\r\n              ? getFlag(rowData.isActive)\r\n              : getFlag(rowData.lockFlag)\r\n          }}\r\n          <p-inputSwitch\r\n            [(ngModel)]=\"lck\"\r\n            [disabled]=\"!enableUpdate\"\r\n            (onChange)=\"updateLockFlag(rowData)\"\r\n          ></p-inputSwitch>\r\n        </div>\r\n        <div\r\n          *ngIf=\"\r\n            table.editFlag && table.deleteFlag && col.fieldId !== 'lockFlag'\r\n          \"\r\n          class=\"flex justify-content-center\"\r\n        >\r\n          <button\r\n            *ngIf=\"enableUpdate || viewDetails\"\r\n            pButton\r\n            type=\"button\"\r\n            class=\"edit-button mr-3\"\r\n            [disabled]=\"rowData.lockFlag\"\r\n            iconPos=\"left\"\r\n            (click)=\"edit(table.name == 'users' ? rowData.userId : rowData.id)\"\r\n          >\r\n            <span *ngIf=\"enableUpdate\"> <i class=\"icon-edit\"></i> Edit </span>\r\n            <span *ngIf=\"viewDetails && !enableUpdate\">\r\n              <i class=\"icon-eye\"></i> View Details\r\n            </span>\r\n          </button>\r\n\r\n          <button\r\n            *ngIf=\"table.deleteFlag && enableDelete\"\r\n            pButton\r\n            type=\"button\"\r\n            class=\"delete-button\"\r\n            [disabled]=\"rowData.lockFlag\"\r\n            iconPos=\"left\"\r\n            (click)=\"\r\n              delete(\r\n                $event,\r\n                table.name == 'users' ? rowData.userId : rowData.id\r\n              )\r\n            \"\r\n          >\r\n            <i class=\"pi pi-trash\"></i> Delete\r\n          </button>\r\n        </div>\r\n        <div [ngClass]=\"table.name == 'transferAdjustment'?'align-end':''\">\r\n        <span *ngIf=\"col.fieldTitle\"\r\n          >{{ col.fieldTitle }} {{ rowData[col.fieldId] }}</span\r\n        >\r\n        <div *ngIf=\"col.type == 'input'\">\r\n          <span class=\"p-float-label\" [ngClass]=\"table.name == 'transferAdjustment'?'margin-b':''\">\r\n            <input\r\n              #input\r\n              style=\"width: 16vw\"\r\n              type=\"{{ col.inputType }}\"\r\n              pInputText\r\n              maxlength=\"50\"\r\n              max=\"3000\"\r\n              [ngClass]=\"{ err: max }\"\r\n              (input)=\"\r\n                ChangeData(input, col.fieldId, col.type, rowData, rowIndex)\r\n              \"\r\n            />\r\n            <label>{{ col.label }} </label>\r\n          </span>\r\n          <span class=\"error\"\r\n          [ngClass]=\"table.name == 'manualAdjustment'?'err-subs':''\" *ngIf=\"max && targetRow == data.ratePlanKey\">\r\n            Out Of limit: Max Number of Subs is 3000\r\n          </span>\r\n          <span\r\n            class=\"error\"\r\n            *ngIf=\"adjustNotValid && editableRowId === rowIndex\"\r\n          >\r\n            *Required value\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"drp\" *ngIf=\"col.type == 'dropdown'\">\r\n          <div [ngClass]=\"table.name == 'transferAdjustment'?'margin-b':''\">\r\n          <p-dropdown\r\n            [options]=\"col.data\"\r\n            styleClass=\"tableDropX\"\r\n            optionLabel=\"{{ col.optionLabel }}\"\r\n            placeholder=\"{{ col.placeholder }} \"\r\n            [showClear]=\"true\"\r\n            (onChange)=\"\r\n              ChangeData($event, col.fieldId, col.type, rowData, rowIndex)\r\n            \"\r\n            [disabled]=\"(table.name == 'manualAdjustment'&& (!rowData.numberOfSubs||rowData.numberOfSubs == 0))||(table.name == 'validation'&& rowData[col.fieldId] == 0 )\"\r\n          >\r\n          <ng-template *ngIf=\"table.name == 'validation' ||table.name == 'manualAdjustment'\" let-option pTemplate=\"item\">\r\n            <div>\r\n            <i *ngIf=\"option.value == 1\" class=\"pi pi-arrow-up\"></i>\r\n            <i *ngIf=\"option.value == -1\" class=\"pi pi-arrow-down\"></i>\r\n            <i *ngIf=\"option.value == 0\" class=\"pi pi-minus\"></i>\r\n            <span>{{option.trxTypeName}}\r\n              </span>\r\n            </div>\r\n          </ng-template>\r\n        </p-dropdown>\r\n      </div>\r\n          <span\r\n            class=\"error error-left\"\r\n            *ngIf=\"rateplanNotValid && editableRowId === rowIndex\"\r\n          >\r\n            *Required value\r\n          </span>\r\n        </div>\r\n      </div>\r\n      </td>\r\n    </tr>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"emptymessage\">\r\n    <tr>\r\n      <td colspan=\"7\" style=\"text-align: center\">No Data found.</td>\r\n    </tr>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"paginatorright\">\r\n    <button\r\n      *ngIf=\"table.hasSubmit && enableUpdatePatch\"\r\n      pButton\r\n      class=\"btn btn-basic\"\r\n      type=\"submit\"\r\n      label=\"Submit\"\r\n      (click)=\"update()\"\r\n      [disabled]=\"\r\n        max ||\r\n        (table.name == 'manualAdjustment' && manualAdjustList.length == 0) ||\r\n        (table.name == 'validation' && aggregationList.length == 0) ||\r\n        (table.name == 'transferAdjustment' && (transferAdjustList.length == 0||rateplanNotValid) )\r\n      \"\r\n    ></button>\r\n  </ng-template>\r\n</p-table>\r\n\r\n<app-dialog\r\n  [dialogConfig]=\"dialogConfig\"\r\n  [openDialog]=\"openDialog\"\r\n  [closeDialog]=\"!openDialog\"\r\n>\r\n</app-dialog>\r\n<p-confirmDialog\r\n  class=\"confirm-dialog\"\r\n  header=\"Confirmation\"\r\n  icon=\"pi pi-exclamation-triangle\"\r\n></p-confirmDialog>\r\n","import {\r\n  Component,\r\n  Injectable,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  ConfirmationService,\r\n  Header,\r\n  PrimeNGConfig,\r\n  SortEvent,\r\n} from 'primeng/api';\r\nimport { TableModel } from '../../models/table.model';\r\nimport { Table } from 'primeng/table';\r\nimport { UsersService } from 'src/app/users/services/users.service';\r\nimport { DialogData } from '../../models/dialog.model';\r\nimport { ProfilesService } from 'src/app/profiles/services/profiles.service';\r\nimport { Profile } from 'src/app/profiles/models/profile.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { AggregationData } from 'src/app/validation/models/aggregation-data.model';\r\nimport { HeaderService } from 'src/app/core/services/header-service/header.service';\r\nimport { ValidationService } from 'src/app/validation/services/validation.service';\r\nimport { ManualAdjustment } from 'src/app/manual-adjustment/models/manual-adjustment.model';\r\nimport { AdjustmentService } from 'src/app/manual-adjustment/services/adjustment.service';\r\nimport { Transfer } from 'src/app/transfer-adjustment/models/transferAdjus.model';\r\nimport { TransferAdjustmentService } from 'src/app/transfer-adjustment/services/transfer-adjustment.service';\r\nimport { FootprintService } from '../../services/footprint-service/footprint.service';\r\nimport { ExportExcelService } from '../../services/exportExcel-service/export-excel.service';\r\nimport { User } from 'src/app/users/models/user';\r\nimport { ClipboardService } from 'ngx-clipboard';\r\nimport { Calc } from 'src/app/validation/models/calculation.model';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n})\r\n@Injectable()\r\nexport class TableComponent implements OnInit, OnDestroy {\r\n  @Input() table!: TableModel;\r\n  @ViewChild('dt') dt: Table | undefined;\r\n  @Input() globalFilterFields!: string[];\r\n  @Input('enableUpdate') enableUpdate!: boolean;\r\n  @Input('enableUpdatePatch') enableUpdatePatch!: boolean;\r\n  @Input('enableDelete') enableDelete!: boolean;\r\n  @Input('viewDetails') viewDetails!: boolean;\r\n  @Input('originalData') originalData!: any[];\r\n\r\n  loading: boolean = false;\r\n  pageSize: number = 5;\r\n  lockUser: string = 'Lock the ';\r\n  unlockUser: string = 'Unlock the ';\r\n  openDialog!: boolean;\r\n  lck!: any;\r\n  dialogConfig!: DialogData;\r\n  profileSubscription!: Subscription;\r\n  aggregationList: AggregationData[] = [];\r\n  manualAdjustList: ManualAdjustment[] = [];\r\n  transferAdjustList: Transfer[] = [];\r\n  epochDate!: any;\r\n  max!: boolean;\r\n  targetRow!: number;\r\n  transferSubscription!: Subscription;\r\n  adjustNotValid!: boolean;\r\n  rateplanNotValid!: boolean;\r\n  editableRowId!: number;\r\n  viewMode!: boolean;\r\n  selectedData: any;\r\n  prevSortStatus!: SortEvent | undefined; // to reset sort after third click\r\n  constructor(\r\n    private primengConfig: PrimeNGConfig,\r\n    private usersService: UsersService,\r\n    private profilesService: ProfilesService,\r\n    private router: Router,\r\n    private confirmationService: ConfirmationService,\r\n    private headerService: HeaderService,\r\n    private validationService: ValidationService,\r\n    private manualAgjustService: AdjustmentService,\r\n    private transferAdjustService: TransferAdjustmentService,\r\n    private footPrintService: FootprintService,\r\n    private exportExcelService: ExportExcelService,\r\n    private clipboardApi: ClipboardService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.primengConfig.ripple = true;\r\n    this.viewMode = this.viewDetails && !this.enableUpdate ? true : false;\r\n  }\r\n  openUserDialog(id?: number) {\r\n    this.usersService.openUserDialog(id, this.viewMode);\r\n    this.openDialog = this.usersService.openDialog;\r\n    this.dialogConfig = this.usersService.dialogConfig;\r\n  }\r\n  applyFilterGlobal($event: any, stringVal: any) {\r\n    this.dt!.filterGlobal(($event.target as HTMLInputElement).value, stringVal);\r\n  }\r\n  edit(id: number) {\r\n    if (this.table.name === 'users') {\r\n      this.openUserDialog(id);\r\n    } else if (this.table.name === 'profiles') {\r\n      this.profilesService.showSubject.next(false);\r\n      let url = this.viewMode ? 'daily/profiles/view/' : 'daily/profiles/edit/';\r\n      url = url + id;\r\n      this.router.navigateByUrl(url);\r\n    }\r\n  }\r\n  updateLockFlag(row: any) {\r\n    if (this.table.name == 'users') {\r\n      this.footPrintService.objectIdentifier = row.id;\r\n      let oldUser: User = {\r\n        lockFlag: this.lck == true ? 0 : 1,\r\n      };\r\n      this.footPrintService.handleOldValue(oldUser);\r\n      let newUser: User = {\r\n        lockFlag: this.lck == true ? 1 : 0,\r\n      };\r\n      this.footPrintService.handleNewValue(newUser);\r\n      this.usersService.updateUser({\r\n        name: row.name,\r\n        userId: row.userId,\r\n        username: row.username,\r\n        lockFlag: this.lck == true ? 1 : 0,\r\n        profileId: row.profileId,\r\n      });\r\n      this.lck = null;\r\n    } else if (this.table.name == 'profiles') {\r\n      let profile: Profile = row;\r\n      profile.isActive = this.lck == true ? 1 : 0;\r\n      this.footPrintService.objectIdentifier = row.id;\r\n      let oldProfile: Profile = {\r\n        isActive: this.lck == true ? 0 : 1,\r\n      };\r\n      this.footPrintService.handleOldValue(oldProfile);\r\n      let newProfile: Profile = {\r\n        isActive: this.lck == true ? 1 : 0,\r\n      };\r\n      this.footPrintService.handleNewValue(newProfile);\r\n      this.profileSubscription = this.profilesService\r\n        .manageProfile(profile, 'edit')\r\n        .subscribe((resp) => {});\r\n    }\r\n  }\r\n  delete(event: any, id: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message:\r\n        this.table.name === 'users'\r\n          ? 'Are you sure that you want to delete this user ?'\r\n          : 'Are you sure that you want to delete this profile ?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      accept: () => {\r\n        //confirm action\r\n        this.footPrintService.objectIdentifier = id;\r\n        if (this.table.name === 'users') {\r\n          this.usersService.deleteUser(id);\r\n        }\r\n        if (this.table.name === 'profiles') {\r\n          this.profilesService.deleteProfile(id).subscribe((resp) => {\r\n            this.profilesService.getProfilesList().subscribe((resp) => {\r\n              this.table.data = resp['payload']['profilesList'];\r\n            });\r\n          });\r\n        }\r\n      },\r\n      reject: () => {\r\n        //reject action\r\n      },\r\n    });\r\n  }\r\n  getFlag(flag: any) {\r\n    if (flag == 1) {\r\n      this.lck = true;\r\n    } else {\r\n      this.lck = false;\r\n    }\r\n  }\r\n  ChangeData(\r\n    event: any,\r\n    feild: string,\r\n    type: string,\r\n    data: any,\r\n    rowIndex: number\r\n  ) {\r\n    console.log('event', event.value);\r\n    this.epochDate = localStorage.getItem('date');\r\n    if (this.table.name == 'validation') {\r\n      if (feild == 'inSubs') {\r\n        data.trxInSubsValue = +event.value?.value;\r\n      } else if (feild == 'outSubs') {\r\n        data.trxOutSubsValue = +event.value?.value;\r\n      }\r\n      let dataToCalculate: Calc = {\r\n        trxInSubs: data.trxInSubsValue ? +data.trxInSubsValue : 0,\r\n        trxOutSubs: data.trxOutSubsValue ? +data.trxOutSubsValue : 0,\r\n        inSubs: +data['inSubs'],\r\n        outSubs: +data['outSubs'],\r\n      };\r\n      this.calculationValidations(data.ratePlanKey, dataToCalculate);\r\n      if (this.aggregationList.length) {\r\n        let obj = this.aggregationList.find((item) => {\r\n          return item.ratePlanKey === data.ratePlanKey && data.dwhStatusKey === item.dwhStatusKey;\r\n        });\r\n        if (obj) {\r\n          if (feild == 'inSubs') {\r\n            obj.inAdjustFlag = event.value !== null ? 1 : 0;\r\n            obj.inSubTransactionTypeKey = event.value?.trxTypeKey;\r\n          }\r\n          if (feild == 'outSubs') {\r\n            obj.outAdjustFlag = event.value !== null ? 1 : 0;\r\n            obj.outSubTransactionTypeKey = event.value?.trxTypeKey;\r\n          }\r\n        } else {\r\n          this.fillList(event, data, feild);\r\n        }\r\n      } else {\r\n        this.fillList(event, data, feild);\r\n      }\r\n    }\r\n    if (this.table.name == 'manualAdjustment') {\r\n      this.targetRow = data.ratePlanKey;\r\n      type == 'input' && event.value > 3000\r\n        ? (this.max = true)\r\n        : (this.max = false);\r\n      if (type === 'input') data.numberOfSubs = event.value;\r\n      if (this.manualAdjustList.length) {\r\n        let obj = this.manualAdjustList.find((item) => {\r\n          return item.ratePlanKey == data.ratePlanKey;\r\n        });\r\n        if (obj) {\r\n          type == 'dropdown'\r\n            ? (obj.trxTypeKey =\r\n                event.value == null ? 0 : +event.value.trxTypeKey)\r\n            : '';\r\n          type == 'input'\r\n            ? (obj.numberOfSubs = +event.value == undefined ? 0 : +event.value)\r\n            : '';\r\n          if (obj.trxTypeKey && obj.numberOfSubs) {\r\n            let trxData = this.table.extracols[0].data;\r\n            let trxValue = trxData.find(\r\n              (item: any) => item.trxTypeKey == obj?.trxTypeKey\r\n            );\r\n            data.calculated = true;\r\n            this.calculation(\r\n              data.ratePlanKey,\r\n              +trxValue.value,\r\n              +obj.numberOfSubs\r\n            );\r\n          } else {\r\n            this.table.data[rowIndex].closing =\r\n              this.originalData[rowIndex].closing;\r\n            this.table.data[rowIndex].variance =\r\n              this.originalData[rowIndex].variance;\r\n          }\r\n        } else {\r\n          this.fillList(event, data);\r\n        }\r\n      } else {\r\n        this.fillList(event, data);\r\n      }\r\n    }\r\n    if (this.table.name == 'transferAdjustment') {\r\n      let index;\r\n      type == 'dropdown' ? (data.ratePlanObj = event.value) : '';\r\n      type == 'input' ? (data.adjusts = +event.value) : '';\r\n      this.adjustNotValid = data.ratePlanObj && !data.adjusts ? true : false;\r\n      this.rateplanNotValid = !data.ratePlanObj && data.adjusts ? true : false;\r\n      this.editableRowId = rowIndex;\r\n      let existing = false;\r\n      if (this.transferAdjustList.length) {\r\n        this.transferAdjustList.map((item, i) => {\r\n          index = i;\r\n          if (item.trxTypeKey == data.trxTypeKey) {\r\n            existing = true;\r\n            item.numberOfSubs = data.adjusts ? data.adjusts : 0;\r\n            item.ratePlanKey = data.ratePlanObj\r\n              ? data.ratePlanObj.ratePlanKey\r\n              : 0;\r\n            item.ratePlanGroupKey = data.ratePlanObj\r\n              ? data.ratePlanObj.ratePlanGroupKey\r\n              : 0;\r\n            item.ratePlanType = data.ratePlanObj\r\n              ? data.ratePlanObj.ratePlanType\r\n              : 0;\r\n          }\r\n        });\r\n      }\r\n      if (!data.ratePlanObj && !data.adjusts && index !== undefined)\r\n        this.transferAdjustList.splice(index, 1);\r\n\r\n      if (!existing) this.fillList(event, data);\r\n    }\r\n  }\r\n\r\n  calculation(ratePlanKey: number, trxType: number, oldSubs: number) {\r\n    let originalrow = this.originalData.find(\r\n      (item) => item.ratePlanKey == ratePlanKey\r\n    );\r\n    let closing = +originalrow.closing;\r\n    this.table.data.map((item: any) => {\r\n      if (item.ratePlanKey == ratePlanKey) {\r\n        item.closing = closing + trxType * Math.abs(oldSubs);\r\n        item.variance = item.closing - item.opening;\r\n      }\r\n    });\r\n  }\r\n\r\n  calculationValidations(ratePlanKey: number, dataToCalculate: Calc) {\r\n    const filtered = this.table.data.filter(item=> item.ratePlanKey === ratePlanKey);\r\n    let originalrow = this.originalData.find(\r\n      (item) => item.ratePlanKey == ratePlanKey\r\n    );\r\n    let closing = +originalrow.closing;\r\n    if(filtered.length > 1){\r\n      console.log(\"this.table.data\",this.table.data)\r\n      let oldCalc = 0;\r\n      let newCalc = 0;\r\n      this.table.data.map((item: any,i:number) => {\r\n        let inSubs =\r\n        item.trxInSubsValue && item.inSubs\r\n          ? item.trxInSubsValue * Math.abs(item.inSubs)\r\n          : 0;\r\n      let outSubs =\r\n       item.trxOutSubsValue && item.outSubs\r\n          ?item.trxOutSubsValue * Math.abs(item.outSubs)\r\n          : 0;\r\n        if (item.ratePlanKey == ratePlanKey) {\r\n          oldCalc = item.calc?oldCalc+item.calc:oldCalc;\r\n          item.calc = inSubs + outSubs\r\n          newCalc = newCalc + item.calc \r\n        }\r\n        if(this.table.data.length-1 === i)\r\n        this.validationService.updateBalance.next({oldCalc:oldCalc,newCalc:newCalc});\r\n      });\r\n      this.table.data.map(item=>{\r\n       if(item.ratePlanKey == ratePlanKey){\r\n          item.closing = closing + newCalc;\r\n          item.variance = item.closing - item.opening;\r\n       }\r\n      })\r\n    } else {\r\n    let inSubs =\r\n      dataToCalculate.trxInSubs && dataToCalculate.inSubs\r\n        ? dataToCalculate.trxInSubs * Math.abs(dataToCalculate.inSubs)\r\n        : 0;\r\n    let outSubs =\r\n      dataToCalculate.trxOutSubs && dataToCalculate.outSubs\r\n        ? dataToCalculate.trxOutSubs * Math.abs(dataToCalculate.outSubs)\r\n        : 0;\r\n    this.table.data.map((item: any) => {\r\n      if (item.ratePlanKey == ratePlanKey) {\r\n        let oldCalc = item.calc ? item.calc : 0;\r\n        item.closing = closing + inSubs + outSubs;\r\n        item.variance = item.closing - item.opening;\r\n        if (!inSubs && !outSubs) {\r\n          item.closing = originalrow.closing;\r\n          item.variance = originalrow.variance;\r\n        }\r\n        item.calc = inSubs + outSubs;\r\n        this.validationService.updateBalance.next({\r\n          oldCalc: oldCalc,\r\n          newCalc: item.calc,\r\n        });\r\n      }\r\n    });\r\n  }\r\n  }\r\n\r\n  fillList(event: any, data: any, feild?: string) {\r\n    if (this.table.name == 'manualAdjustment') {\r\n      this.manualAdjustList.push({\r\n        dateKey: data.dateKey,\r\n        dwhStatusKey: 200,\r\n        numberOfSubs: data.numberOfSubs == undefined ? 0 : data.numberOfSubs,\r\n        trxTypeKey: event.value.trxTypeKey ? +event.value.trxTypeKey : 0,\r\n        ratePlanKey: data.ratePlanKey,\r\n        ratePlanGroupKey: data.ratePlanGroupKey,\r\n        ratePlanType: data.ratePlanType,\r\n      });\r\n    } else if (this.table.name == 'validation') {\r\n      this.aggregationList.push({\r\n        dateKey: this.epochDate,\r\n        inAdjustFlag: feild == 'inSubs' && event.value !== null ? 1 : 0,\r\n        outAdjustFlag: feild == 'outSubs' && event.value !== null ? 1 : 0,\r\n        ratePlanKey: data.ratePlanKey,\r\n        dwhStatusKey: data.dwhStatusKey,\r\n        dayDateKey: data.dateKey,\r\n        inSubTransactionTypeKey:\r\n          feild == 'inSubs' ? event?.value?.trxTypeKey : '',\r\n        outSubTransactionTypeKey:\r\n          feild == 'outSubs' ? event?.value?.trxTypeKey : '',\r\n      });\r\n    } else if (this.table.name == 'transferAdjustment') {\r\n      this.transferAdjustList.push({\r\n        numberOfSubs: data.adjusts ? data.adjusts : 0, // Adjusts\r\n        dataKey: +data.dateKey,\r\n        ratePlanKey: data.ratePlanObj ? data.ratePlanObj.ratePlanKey : 0,\r\n        ratePlanGroupKey: data.ratePlanObj\r\n          ? data.ratePlanObj.ratePlanGroupKey\r\n          : 0,\r\n        trxTypeKey: +data.trxTypeKey,\r\n        dwhStatusKey: 1,\r\n        pgGroupKey: 1,\r\n        ratePlanType: data.ratePlanObj ? data.ratePlanObj.ratePlanType : 0,\r\n      });\r\n    }\r\n  }\r\n  update() {\r\n    if (this.table.name == 'validation') {\r\n      this.footPrintService.handleNewValue(this.aggregationList, 'ratePlanKey');\r\n      console.log(\"aggregationList\",this.aggregationList);  \r\n      this.validationService\r\n        .submitData(this.aggregationList)\r\n        .subscribe((resp) => {\r\n          this.aggregationList = [];\r\n          this.footPrintService.refreshFlag = true;\r\n          this.validationService\r\n            .getvalidationList(this.epochDate)\r\n            .subscribe((resp) => {\r\n              this.table.data = resp['payload']['list'];\r\n              this.originalData = JSON.parse(\r\n                JSON.stringify(resp['payload']['list'])\r\n              );\r\n            });\r\n        });\r\n    }\r\n    if (this.table.name == 'manualAdjustment') {\r\n      this.footPrintService.handleNewValue(\r\n        this.manualAdjustList,\r\n        'ratePlanKey'\r\n      );\r\n      this.manualAgjustService\r\n        .updateManualAdjustment(this.manualAdjustList)\r\n        .subscribe((resp) => {\r\n          this.manualAdjustList = [];\r\n          this.footPrintService.refreshFlag = true;\r\n\r\n          this.manualAgjustService\r\n            .getManualAdjustment(this.epochDate)\r\n            .subscribe((resp) => {\r\n              this.table.data = resp['payload'];\r\n              this.table.data?.map((item) => {\r\n                item.variance =\r\n                  (item.closing ? item.closing : 0) -\r\n                  (item.opening ? item.opening : 0);\r\n              });\r\n              this.originalData = JSON.parse(JSON.stringify(this.table.data));\r\n            });\r\n        });\r\n    }\r\n    if (this.table.name == 'transferAdjustment') {\r\n      this.footPrintService.handleNewValue(\r\n        this.transferAdjustList,\r\n        'trxTypeKey'\r\n      );\r\n      this.transferSubscription = this.transferAdjustService\r\n        .updateTransferAdjustment(this.transferAdjustList)\r\n        .subscribe((resp) => {\r\n          this.transferAdjustList = [];\r\n          this.footPrintService.refreshFlag = true;\r\n\r\n          this.transferAdjustService\r\n            .getTransferAdjustment(this.epochDate)\r\n            .subscribe(\r\n              (resp) =>\r\n                (this.table.data = resp['payload']['getTransferAdjustmentList'])\r\n            );\r\n        });\r\n    }\r\n  }\r\n  exportExcel() {\r\n    this.exportExcelService.exportAsExcelFile(this.table.data, 'report');\r\n  }\r\n  copyToClipboard() {\r\n    let copiedData = this.selectedData.map((item: any) => {\r\n      item = [item.trxTypeName, item.subs];\r\n      console.log(item);\r\n      return item;\r\n    });\r\n    copiedData = copiedData.map((lines: any) => lines.join('\\t')).join('\\n');\r\n    this.clipboardApi.copyFromContent(copiedData);\r\n  }\r\n\r\n  sortColumn(event: SortEvent) {\r\n    // to reset sort after third click\r\n    console.log('sort', event);\r\n    console.log('sort', this.table.data);\r\n    if (\r\n      this.prevSortStatus?.field == event.field &&\r\n      this.prevSortStatus?.order == -1\r\n    ) {\r\n      this.dt?.reset();\r\n    }\r\n    if (event.order == -1) this.prevSortStatus = event;\r\n    else this.prevSortStatus = undefined;\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.profileSubscription?.unsubscribe();\r\n    this.transferSubscription?.unsubscribe();\r\n  }\r\n}\r\n","export class TableModel {\r\n  cols!: Array<any>;\r\n  data!: Array<any>;\r\n  extracols!: Array<any>;\r\n  pagination!: boolean;\r\n  lockFlag!: boolean;\r\n  editFlag!: boolean;\r\n  deleteFlag!: boolean;\r\n  name!: String;\r\n  hasSubmit!: boolean;\r\n  globalFilterFields!: string[];\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiResponse } from 'src/app/shared/statics/apiResponse';\r\nimport { Defines } from 'src/app/shared/statics/defines';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Transfer } from '../models/transferAdjus.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TransferAdjustmentService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getTransferAdjustment(date: number) {\r\n    let body = { date: date };\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.TRANSFER_ENDPOINTS.REPORT_SERVICE +\r\n        Defines.TRANSFER_ENDPOINTS.TRANSFER_ADJUSTMENT +\r\n        Defines.TRANSFER_ENDPOINTS.AGGREGATION_DATA +\r\n        Defines.CRUD.GET_ALL,\r\n      body\r\n    );\r\n  }\r\n\r\n  updateTransferAdjustment(data: Transfer[]) {\r\n    let body = { addTransferAdjustmentRequests: data };\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.TRANSFER_ENDPOINTS.REPORT_SERVICE +\r\n        Defines.TRANSFER_ENDPOINTS.TRANSFER_ADJUSTMENT +\r\n        Defines.TRANSFER_ENDPOINTS.AGGREGATION_DATA +\r\n        Defines.CRUD.ADD,\r\n      body\r\n    );\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, tap } from 'rxjs';\r\nimport { DialogData } from 'src/app/shared/models/dialog.model';\r\nimport { ApiResponse } from 'src/app/shared/statics/apiResponse';\r\nimport { Defines } from 'src/app/shared/statics/defines';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UsersService {\r\n  pathUrl: string =\r\n    environment.url +\r\n    Defines.USERS_ENDPOINTS.USERS_MANAGEMENT_PATH +\r\n    Defines.USERS_ENDPOINTS.USER;\r\n  openDialog: boolean = false;\r\n  dialogConfig!: DialogData;\r\n  private usersList = new BehaviorSubject<User[]>([]);\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get usersList$() {\r\n    return this.usersList.asObservable();\r\n  }\r\n\r\n  openUserDialog(id?: number, viewMode?: boolean) {\r\n    this.openDialog = true;\r\n    let header = viewMode ? 'View Details' : 'Edit User';\r\n    this.dialogConfig = {\r\n      header: id ? header : 'New User',\r\n      name: 'user-management',\r\n      icon: 'icon icon-user',\r\n      view:viewMode,\r\n      inputs: [\r\n        {\r\n          label: 'Display Name',\r\n          element: 'input',\r\n          type: 'text',\r\n          fieldId: 'name',\r\n          required: id ? false : true,\r\n        },\r\n        {\r\n          label: 'Username',\r\n          element: 'input',\r\n          type: 'text',\r\n          fieldId: 'username',\r\n          required: id ? false : true,\r\n        },\r\n        {\r\n          label: 'User Profile',\r\n          element: 'dropdown',\r\n          type: 'singleSelect',\r\n          fieldId: 'profileId',\r\n          required: id ? false : true,\r\n        },\r\n      ],\r\n      buttons: [\r\n        {\r\n          label: id ? 'Update' : 'Create',\r\n          type: 'submit',\r\n        },\r\n        {\r\n          label: 'Cancel',\r\n          type: 'reset',\r\n        },\r\n      ],\r\n      id: id,\r\n    };\r\n  }\r\n\r\n  public getUsersList() {\r\n    let pathUrl = this.pathUrl + Defines.CRUD.GET_ALL;\r\n    return this.http\r\n      .post<ApiResponse<User[]>>(pathUrl, '')\r\n      .pipe(\r\n        tap((resp) => {\r\n          resp.payload?.users.map((user:any)=>{\r\n            user.profileName = user.profileModel.name;\r\n          })\r\n          this.usersList.next(resp.payload?.users);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public addUser(user: User) {\r\n    let pathUrl = this.pathUrl + Defines.CRUD.ADD;\r\n    return this.http\r\n      .post<ApiResponse<User[]>>(pathUrl, { ...user, lockFlag: 0 })\r\n      .pipe(\r\n        tap((resp) => {\r\n          this.getUsersList();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public updateUser(user: User) {\r\n    let pathUrl = this.pathUrl + Defines.CRUD.UPDATE;\r\n    return this.http\r\n      .post<ApiResponse<any>>(pathUrl, user)\r\n      .pipe(\r\n        tap((resp) => {\r\n          console.log(resp);\r\n          this.getUsersList();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n  public getUser(id: number) {\r\n    console.log(id);\r\n    let pathUrl = this.pathUrl + Defines.CRUD.GET;\r\n    return this.http.post<ApiResponse<any>>(pathUrl, { userId: id });\r\n  }\r\n  public deleteUser(id: number) {\r\n    let pathUrl = this.pathUrl + Defines.CRUD.DELETE;\r\n    return this.http\r\n      .post<ApiResponse<any>>(pathUrl, { userId: id })\r\n      .pipe(\r\n        tap((resp) => {\r\n          console.log(resp);\r\n          this.getUsersList();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { ApiResponse } from 'src/app/shared/statics/apiResponse';\r\nimport { Defines } from 'src/app/shared/statics/defines';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AggregationData } from '../models/aggregation-data.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ValidationService {\r\n  updateBalance = new Subject<object>();\r\n  pathUrl: string =\r\n    environment.url +\r\n    Defines.VALIDATION_ENDPOINTS.REPORT_SERVICE +\r\n    Defines.VALIDATION_ENDPOINTS.VALIDATION_ENGINE;\r\n  constructor(private http: HttpClient) {}\r\n  public getvalidationList(epochDate: number) {\r\n    let pathUrl =\r\n      this.pathUrl +\r\n      Defines.VALIDATION_ENDPOINTS.AGGREGATION_DATA +\r\n      Defines.CRUD.GET_ALL;\r\n    return this.http.post<ApiResponse<AggregationData[]>>(pathUrl, {\r\n      date: epochDate,\r\n    });\r\n  }\r\n  public retrieveBalance(epochDate: number) {\r\n    let pathUrl =\r\n      this.pathUrl +\r\n      Defines.VALIDATION_ENDPOINTS.BALANCES +\r\n      Defines.CRUD.GET_ALL;\r\n    return this.http.post<ApiResponse<any>>(pathUrl, {\r\n      date: epochDate,\r\n    });\r\n  }\r\n  public submitData(data: AggregationData[]) {\r\n    let pathUrl = this.pathUrl + Defines.CRUD.UPDATE;\r\n    return this.http.post<ApiResponse<any>>(pathUrl, {\r\n      aggregationLists: data,\r\n    });\r\n  }\r\n  public retrieveTransactionTypes() {\r\n    let pathUrl =\r\n      this.pathUrl +\r\n      Defines.VALIDATION_ENDPOINTS.TRANSACTION_TYPE +\r\n      Defines.CRUD.GET_ALL;\r\n    return this.http.get<ApiResponse<any>>(pathUrl, {});\r\n  }\r\n  public getMAxMinRatePlans(epochDate: number) {\r\n    let pathUrl =\r\n      environment.url +\r\n      Defines.VALIDATION_ENDPOINTS.REPORT_SERVICE +\r\n      Defines.VALIDATION_ENDPOINTS.DASH_BOARD +\r\n      Defines.VALIDATION_ENDPOINTS.AGGREGATION_DATA +\r\n      Defines.CRUD.GET;\r\n    return this.http.post<ApiResponse<any>>(pathUrl, {\r\n      date: epochDate,\r\n    });\r\n  }\r\n}\r\n"]}